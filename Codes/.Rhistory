df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
# Apply Normalization on Train and Test independently
DeSeq_Norm_list <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- DeSeq_Norm_list[[1]]
df_pheno_matched_train <- DeSeq_Norm_list[[2]]
}
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
# Apply Normalization on Train and Test independently
DeSeq_Norm_list <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- DeSeq_Norm_list[[1]]
df_pheno_matched_train <- DeSeq_Norm_list[[2]]
}
featSel_Bench(df, df_pheno)
#' @description
#' Function that given a df_count of input split it into Train and Test
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns df_count_train with genes on cols and samples on rows and the ordered matched df_pheno_train
#' @returns df_count_test with genes on cols and samples on rows and the ordered matched df_pheno_test
Split_train_test <- function(df_count, df_pheno, split = 0.7, seed = 123){
library(caret)
library(dplyr)
# match df_count and df_pheno
m <- match(rownames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
# Create data partition on df_pheno outcome to create a balanced split
set.seed(seed)
train_samples <- df_pheno$patient.vital_status %>%
createDataPartition(p = split, list = FALSE)
df_count_train <- df_count[train_samples, ]
df_pheno_train <- df_pheno[train_samples, ]
df_count_test <- df_count[-train_samples, ]
df_pheno_test <- df_pheno[-train_samples, ]
return(list(df_count_train, df_pheno_train,
df_count_test, df_pheno_test))
}
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
# Apply Normalization on Train and Test independently
DeSeq_Norm_list <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- DeSeq_Norm_list[[1]]
df_pheno_matched_train <- DeSeq_Norm_list[[2]]
}
featSel_Bench(df, df_pheno)
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
print(df_count_train)
print(df_count_test)
print(df_pheno_train)
print(df_pheno_test)
# Apply Normalization on Train and Test independently
DeSeq_Norm_list <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- DeSeq_Norm_list[[1]]
df_pheno_matched_train <- DeSeq_Norm_list[[2]]
}
featSel_Bench(df, df_pheno)
View(df)
#' @description
#' Function that given a df_count of input split it into Train and Test
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns df_count_train with genes on cols and samples on rows and the ordered matched df_pheno_train
#' @returns df_count_test with genes on cols and samples on rows and the ordered matched df_pheno_test
Split_train_test <- function(df_count, df_pheno, split = 0.7, seed = 123){
library(caret)
library(dplyr)
# match df_count and df_pheno
m <- match(rownames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
# Create data partition on df_pheno outcome to create a balanced split
set.seed(seed)
train_samples <- df_pheno$patient.vital_status %>%
createDataPartition(p = split, list = FALSE)
df_count_train <- df_count[train_samples, ]
df_pheno_train <- df_pheno[train_samples, ]
df_count_test <- df_count[-train_samples, ]
df_pheno_test <- df_pheno[-train_samples, ]
print(df_count_train)
print(df_count_test)
print(df_pheno_train)
print(df_pheno_test)
return(list(df_count_train, df_pheno_train,
df_count_test, df_pheno_test))
}
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
# Apply Normalization on Train and Test independently
DeSeq_Norm_list <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- DeSeq_Norm_list[[1]]
df_pheno_matched_train <- DeSeq_Norm_list[[2]]
}
featSel_Bench(df, df_pheno)
#' @description
#' Function that given a df_count of input split it into Train and Test
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns df_count_train with genes on cols and samples on rows and the ordered matched df_pheno_train
#' @returns df_count_test with genes on cols and samples on rows and the ordered matched df_pheno_test
Split_train_test <- function(df_count, df_pheno, split = 0.7, seed = 123){
library(caret)
library(dplyr)
# match df_count and df_pheno
m <- match(rownames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
# Create data partition on df_pheno outcome to create a balanced split
set.seed(seed)
train_samples <- df_pheno$patient.vital_status %>%
createDataPartition(p = split, list = FALSE)
print(train_samples)
df_count_train <- df_count[train_samples, ]
df_pheno_train <- df_pheno[train_samples, ]
df_count_test <- df_count[-train_samples, ]
df_pheno_test <- df_pheno[-train_samples, ]
print(head(df_count_train))
print(head(df_count_test))
print(head(df_pheno_train))
print(head(df_pheno_test))
return(list(df_count_train, df_pheno_train,
df_count_test, df_pheno_test))
}
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
# Apply Normalization on Train and Test independently
DeSeq_Norm_list <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- DeSeq_Norm_list[[1]]
df_pheno_matched_train <- DeSeq_Norm_list[[2]]
}
featSel_Bench(df, df_pheno)
Splitted_df <- Split_train_test(df, df_pheno)
View(Splitted_df)
Splitted_df[[1]]
View(Splitted_df[[1]])
View(Splitted_df[[2]])
View(Splitted_df[[3]])
View(Splitted_df[[4]])
#' @description
#' Function that given a df_count of input split it into Train and Test
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns df_count_train with genes on cols and samples on rows and the ordered matched df_pheno_train
#' @returns df_count_test with genes on cols and samples on rows and the ordered matched df_pheno_test
Split_train_test <- function(df_count, df_pheno, split = 0.7, seed = 123){
library(caret)
library(dplyr)
# match df_count and df_pheno
m <- match(rownames(df_count), rownames(df_pheno))
df_pheno <- df_pheno[m, ]
# Create data partition on df_pheno outcome to create a balanced split
set.seed(seed)
train_samples <- df_pheno$patient.vital_status %>%
createDataPartition(p = split, list = FALSE)
print(train_samples)
df_count_train <- df_count[train_samples, ]
df_pheno_train <- df_pheno[train_samples, ]
df_count_test <- df_count[-train_samples, ]
df_pheno_test <- df_pheno[-train_samples, ]
print(head(df_count_train))
print(head(df_count_test))
print(head(df_pheno_train))
print(head(df_pheno_test))
return(list(df_count_train, df_pheno_train,
df_count_test, df_pheno_test))
}
Splitted_df <- Split_train_test(df, df_pheno)
View(Splitted_df)
View(Splitted_df[[3]])
View(Splitted_df[[4]])
#' @description
#' Function that given a df_count of input split it into Train and Test
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns df_count_train with genes on cols and samples on rows and the ordered matched df_pheno_train
#' @returns df_count_test with genes on cols and samples on rows and the ordered matched df_pheno_test
Split_train_test <- function(df_count, df_pheno, split = 0.8, seed = 123){
library(caret)
library(dplyr)
# match df_count and df_pheno
m <- match(rownames(df_count), rownames(df_pheno))
df_pheno <- df_pheno[m, ]
# Create data partition on df_pheno outcome to create a balanced split
set.seed(seed)
train_samples <- df_pheno$patient.vital_status %>%
createDataPartition(p = split, list = FALSE)
print(train_samples)
df_count_train <- df_count[train_samples, ]
df_pheno_train <- df_pheno[train_samples, ]
df_count_test <- df_count[-train_samples, ]
df_pheno_test <- df_pheno[-train_samples, ]
print(head(df_count_train))
print(head(df_count_test))
print(head(df_pheno_train))
print(head(df_pheno_test))
return(list(df_count_train, df_pheno_train,
df_count_test, df_pheno_test))
}
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
# Apply Normalization on Train and Test independently
DeSeq_Norm_list <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- DeSeq_Norm_list[[1]]
df_pheno_matched_train <- DeSeq_Norm_list[[2]]
}
featSel_Bench(df, df_pheno)
a <- featSel_Bench(df, df_pheno)
View(a)
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
# Apply Normalization on Train and Test independently
DeSeq_Norm_list <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- DeSeq_Norm_list[[1]]
df_pheno_matched_train <- DeSeq_Norm_list[[2]]
return(list(df_norm_train, df_pheno_matched_train))
}
a <- featSel_Bench(df, df_pheno)
View(a)
a[[1]]
head(a[[1]])
head(a[[1]],5)
head(as.data.frame(a[[1]]),5)
a1 <- a[[1]]
a1 <- as.data.frame(a[[1]])
View(a1)
head(a1)
head(a1,5)
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
## Apply Normalization on Train and Test independently
# Train Normalization
DeSeq_Norm_list_tr <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- DeSeq_Norm_list_tr[[1]]
df_pheno_matched_train <- DeSeq_Norm_list_tr[[2]]
# Test Normalization
DeSeq_Norm_list_tst <- DeSeq_Norm(df_count_test, df_pheno_test)
df_norm_test <- DeSeq_Norm_list_tst[[1]]
df_pheno_matched_test <- DeSeq_Norm_list_tst[[2]]
return(list(df_norm_train, df_pheno_matched_train, df_norm_test, df_pheno_matched_test))
}
a <- featSel_Bench(df, df_pheno)
View(a)
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
## Apply Normalization on Train and Test independently
# Train Normalization
DeSeq_Norm_list_tr <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- as.data.frame(DeSeq_Norm_list_tr[[1]])
df_pheno_matched_train <- DeSeq_Norm_list_tr[[2]]
# Test Normalization
DeSeq_Norm_list_tst <- DeSeq_Norm(df_count_test, df_pheno_test)
df_norm_test <- as.data.frame(DeSeq_Norm_list_tst[[1]])
df_pheno_matched_test <- DeSeq_Norm_list_tst[[2]]
return(list(df_norm_train, df_pheno_matched_train, df_norm_test, df_pheno_matched_test))
}
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
print("############################################")
print("Started splitting df into train and test ...")
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
print("Starting Normalization with DeSeq2")
## Apply Normalization on Train and Test independently
# Train Normalization
DeSeq_Norm_list_tr <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- as.data.frame(DeSeq_Norm_list_tr[[1]])
df_pheno_matched_train <- DeSeq_Norm_list_tr[[2]]
# Test Normalization
DeSeq_Norm_list_tst <- DeSeq_Norm(df_count_test, df_pheno_test)
df_norm_test <- as.data.frame(DeSeq_Norm_list_tst[[1]])
df_pheno_matched_test <- DeSeq_Norm_list_tst[[2]]
print("Finished successfully")
print("############################################")
return(list(df_norm_train, df_pheno_matched_train, df_norm_test, df_pheno_matched_test))
}
a <- featSel_Bench(df, df_pheno)
#' @description
#' Function that given a df_count of input split it into Train and Test
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns df_count_train with genes on cols and samples on rows and the ordered matched df_pheno_train
#' @returns df_count_test with genes on cols and samples on rows and the ordered matched df_pheno_test
Split_train_test <- function(df_count, df_pheno, split = 0.8, seed = 123){
library(caret)
library(dplyr)
# match df_count and df_pheno
m <- match(rownames(df_count), rownames(df_pheno))
df_pheno <- df_pheno[m, ]
# Create data partition on df_pheno outcome to create a balanced split
set.seed(seed)
train_samples <- df_pheno$patient.vital_status %>%
createDataPartition(p = split, list = FALSE)
print(train_samples)
df_count_train <- df_count[train_samples, ]
df_pheno_train <- df_pheno[train_samples, ]
df_count_test <- df_count[-train_samples, ]
df_pheno_test <- df_pheno[-train_samples, ]
return(list(df_count_train, df_pheno_train,
df_count_test, df_pheno_test))
}
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
print("############################################")
print("Started splitting df into train and test ...")
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
print("Starting Normalization with DeSeq2")
## Apply Normalization on Train and Test independently
# Train Normalization
DeSeq_Norm_list_tr <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- as.data.frame(DeSeq_Norm_list_tr[[1]])
df_pheno_matched_train <- DeSeq_Norm_list_tr[[2]]
# Test Normalization
DeSeq_Norm_list_tst <- DeSeq_Norm(df_count_test, df_pheno_test)
df_norm_test <- as.data.frame(DeSeq_Norm_list_tst[[1]])
df_pheno_matched_test <- DeSeq_Norm_list_tst[[2]]
print("Finished successfully")
print("############################################")
return(list(df_norm_train, df_pheno_matched_train, df_norm_test, df_pheno_matched_test))
}
a <- featSel_Bench(df, df_pheno)
#' @description
#' Function that given a df_count of input split it into Train and Test
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns df_count_train with genes on cols and samples on rows and the ordered matched df_pheno_train
#' @returns df_count_test with genes on cols and samples on rows and the ordered matched df_pheno_test
Split_train_test <- function(df_count, df_pheno, split = 0.8, seed = 123){
library(caret)
library(dplyr)
# match df_count and df_pheno
m <- match(rownames(df_count), rownames(df_pheno))
df_pheno <- df_pheno[m, ]
# Create data partition on df_pheno outcome to create a balanced split
set.seed(seed)
train_samples <- df_pheno$patient.vital_status %>%
createDataPartition(p = split, list = FALSE)
#print(train_samples)
df_count_train <- df_count[train_samples, ]
df_pheno_train <- df_pheno[train_samples, ]
df_count_test <- df_count[-train_samples, ]
df_pheno_test <- df_pheno[-train_samples, ]
return(list(df_count_train, df_pheno_train,
df_count_test, df_pheno_test))
}
#' @description
#' Main function used to simulate the benchmark
#' @param df df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count. It
#' should have a column named 'patient.vital_status' containing dependent variables info
#' @returns pipeline results
featSel_Bench <- function(df, df_pheno){
print("############################################")
print("Started splitting df into train and test ...")
# Split df into train and test
Splitted_df <- Split_train_test(df, df_pheno)
df_count_train <- Splitted_df[[1]]
df_pheno_train <- Splitted_df[[2]]
df_count_test <- Splitted_df[[3]]
df_pheno_test <- Splitted_df[[4]]
print("Starting Normalization with DeSeq2")
## Apply Normalization on Train and Test independently
# Train Normalization
DeSeq_Norm_list_tr <- DeSeq_Norm(df_count_train, df_pheno_train)
df_norm_train <- as.data.frame(DeSeq_Norm_list_tr[[1]])
df_pheno_matched_train <- DeSeq_Norm_list_tr[[2]]
# Test Normalization
DeSeq_Norm_list_tst <- DeSeq_Norm(df_count_test, df_pheno_test)
df_norm_test <- as.data.frame(DeSeq_Norm_list_tst[[1]])
df_pheno_matched_test <- DeSeq_Norm_list_tst[[2]]
print("Finished successfully")
print("############################################")
return(list(df_norm_train, df_pheno_matched_train, df_norm_test, df_pheno_matched_test))
}
a <- featSel_Bench(df, df_pheno)
View(a)
View(a[[1]])
View(a[[2]])
View(a[[3]])
View(a[[4]])
install.packages("PPLasso")
library(PPLasso)
