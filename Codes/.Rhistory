set.seed(123)
dati <- data.frame(
M1 = rnorm(15),
M2 = rnorm(15),
M3 = rnorm(15),
M4 = rnorm(15),
M5 = rnorm(15),
M6 = rnorm(15),
M7 = rnorm(15),
M8 = rnorm(15),
M9 = rnorm(15),
M10 = rnorm(15),
Y = sample(0:1, 15, replace = TRUE)
)
View(dati)
# Funzione per eseguire la regressione logistica e ottenere le importanze delle variabili
fit_logistica <- function(data) {
modello <- glm(Y ~ M1 + M2 + M3 + M4 + M5 + M6 + M7 + M8 + M9 + M10, data = data, family = "binomial")
return(coef(modello)[-1])  # Restituisci i coefficienti escludendo l'intercetta
}
# Dividi il dataset in set di training e test
setIndex <- createDataPartition(dati$Y, p = 0.7, list = FALSE)
library(caret)
# Dividi il dataset in set di training e test
setIndex <- createDataPartition(dati$Y, p = 0.7, list = FALSE)
train_data <- dati[setIndex, ]
test_data <- dati[-setIndex, ]
# Esegui il bootstrap e ottieni le importanze delle variabili per ciascun bootstrap
num_bootstrap <- 100
risultati_bootstrap <- boot(data = train_data, statistic = fit_logistica, R = num_bootstrap)
# Funzione per eseguire la regressione logistica e ottenere le importanze delle variabili
fit_logistica <- function(data, indices) {
data_boot <- data[indices, ]
modello <- glm(Y ~ M1 + M2 + M3 + M4 + M5 + M6 + M7 + M8 + M9 + M10, data = data_boot, family = "binomial")
return(coef(modello)[-1])  # Restituisci i coefficienti escludendo l'intercetta
}
# Dividi il dataset in set di training e test
setIndex <- createDataPartition(dati$Y, p = 0.7, list = FALSE)
train_data <- dati[setIndex, ]
test_data <- dati[-setIndex, ]
# Esegui il bootstrap e ottieni le importanze delle variabili per ciascun bootstrap
num_bootstrap <- 100
risultati_bootstrap <- boot(data = train_data, statistic = fit_logistica, R = num_bootstrap)
# Estrai le importanze medie delle variabili sui bootstrap
importanze_medie <- colMeans(risultati_bootstrap$t)
# Stampare le importanze medie delle variabili
print(importanze_medie)
risultati_bootstrap$t
# Estrai le importanze medie delle variabili sui bootstrap
importanze_medie <- colMeans(risultati_bootstrap$t, na.rm = T)
# Stampare le importanze medie delle variabili
print(importanze_medie)
df <- read.csv2("Desktop/per_giorgio.csv")
View(df)
library(boot)
logit_test <- function(d,indices) {
d <- d[indices,]
fit <- glm(Class ~ . , data = d, family = "binomial")
return(coef(fit))
}
boot_fit <- boot(
data = df,
statistic = logit_test,
R = 100
)
levels(df$Class)
levels(as.factor(df$Class))
df$Class <- gsub("NR", 0, df$Class)
df$Class <- gsub("R", 1, df$Class)
levels(as.factor(df$Class))
df$Class <- as.factor(df$Class)
logit_test <- function(d,indices) {
d <- d[indices,]
fit <- glm(Class ~ . , data = d, family = "binomial")
return(coef(fit))
}
boot_fit <- boot(
data = df,
statistic = logit_test,
R = 100
)
View(df)
rownames(df) <- df$X
df$X <- NULL
logit_test <- function(d,indices) {
d <- d[indices,]
fit <- glm(Class ~ . , data = d, family = "binomial")
return(coef(fit))
}
boot_fit <- boot(
data = df,
statistic = logit_test,
R = 100
)
View(boot_fit)
library(vip)
library(vi)
install.packages("vip")
library(vip)
vi(boot_fit)
boot_fit[["t"]]
head(boot_fit$t)
head(boot_fit$t, n=10)
boot_fit$t[1:10,1:5]
boot_fit <- boot(
data = df,
statistic = logit_test,
R = 1
)
boot_fit$t[1:10,1:5]
boot_fit$t[1,1:5]
fit <- glm(Class ~ . , data = d, family = "binomial")
fit <- glm(Class ~ . , data = df, family = "binomial")
summary(fit)
View(fit)
fit[["R"]]
fit[["effects"]]
fit[["terms"]]
boot_fit <- boot(
data = df,
statistic = logit_test,
R = 2
)
View(boot_fit)
boot_fit[["t"]]
coef(fit)
logit_test <- function(d,indices) {
d <- d[indices,]
fit <- glm(Class ~ . , data = d, family = "binomial")
return(summary(fit))
}
boot_fit <- boot(
data = df,
statistic = logit_test,
R = 2
)
logit_test <- function(d,indices) {
d <- d[indices,]
fit <- glm(Class ~ . , data = d, family = "binomial")
return(coefficients(fit))
}
boot_fit <- boot(
data = df,
statistic = logit_test,
R = 2
)
View(boot_fit)
boot_fit[["t"]]
bb <- boot(data = df, statistic = glm(Class~. , data = df, family = "binomial"),
sim = "permutation", R=10)
bb <- boot(data = df, statistic = logit_test,
sim = "permutation", R=10)
View(bb)
logit_test <- function(d,indices) {
d <- d[indices,]
fit <- glm(Class ~ . , data = d, family = "binomial")
return(effects(fit))
}
bb <- boot(data = df, statistic = logit_test,
sim = "permutation", R=10)
View(bb)
bb[["t"]]
fit <- glm(Class ~ . , data = df, family = "binomial")
summary(fit)
boot_fit <- boot(
data = df,
statistic = logit_test,
R = 10
)
boot_fit[["t"]]
fit <- glm(Class ~ . , data = df, family = "binomial")
View(fit)
fit[["effects"]]
fit[["weights"]]
fit[["linear.predictors"]]
fit[["y"]]
fit[["model"]]
fit[["coefficients"]]
fit[["effects"]]
boot_fit <- boot(
data = df,
statistic = logit_test,
R = 100
)
View(boot_fit)
boot_fit$t[1,1:5]
boot_fit$t[1:10,1:5]
setwd("/Users/giorgiomontesi/Desktop/Universita_di_Siena/A_PhD_Project/Biomarker_Prediction/Review_Master/Codes")
# Import first df
df <- read.csv2("../Data/ACC_Adrenocortical_Carcinoma/ACC_Count.csv", row.names = 1)
df_pheno <- read.csv2("Data/ACC_Adrenocortical_Carcinoma/ACC_Pheno.csv", row.names = 1)
# Select from df_pheno the only col we are interested in:
df_pheno <- df_pheno[,c(1,9)]
# transform alive status into factor
# 0: alive
# 1: dead
df_pheno$patient.vital_status <- ifelse(df_pheno$patient.vital_status == "alive", 0, 1)
df_pheno <- read.csv2("../Data/ACC_Adrenocortical_Carcinoma/ACC_Pheno.csv", row.names = 1)
# Select from df_pheno the only col we are interested in:
df_pheno <- df_pheno[,c(1,9)]
# transform alive status into factor
# 0: alive
# 1: dead
df_pheno$patient.vital_status <- ifelse(df_pheno$patient.vital_status == "alive", 0, 1)
View(df)
View(df_pheno)
install.packages("roxygen2")
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
library(DESeq2)
return(norm_df)
}
help(DeSeq_Norm)
summary(DeSeq_Norm)
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
library(DESeq2)
norm_df <- df_count
df_pheno_matched <- df_pheno
return(norm_df, df_pheno_matched)
}
df_norm,df_gino <- DeSeq_Norm(df, df_pheno)
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
library(DESeq2)
norm_df <- df_count
df_pheno_matched <- df_pheno
return(list(norm_df, df_pheno_matched))
}
df_norm <- DeSeq_Norm(df, df_pheno)[[1]]
df_gino <- DeSeq_Norm(df,df_pheno)[[2]]
View(df_gino)
View(df)
df_norm <- t(df)
View(df_norm)
df_norm <- as.data.frame(t(df))
View(df_pheno)
View(df)
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
# Rotate df_count
df_count <- as.data.frame(t(df_count))
# match df_count and df_pheno
m <- match(colnames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
library(DESeq2)
# Build DDS matrix for DeSeq
dds <- DESeqDataSetFromMatrix(countData = df_count,
colData = df_pheno_matched,
design =~rownames(df_pheno_matched))
# Apply DeSeq to DDS matrix
dds <- DESeq(dds)
# Compute Normalized Count Data
norm_df <- assay(vst(dds))
#norm_df <- df_count
#df_pheno_matched <- df_pheno
return(list(norm_df, df_pheno_matched))
}
#df_norm <- as.data.frame(t(df))
df_norm <- DeSeq_Norm(df, df_pheno)[[1]]
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
# Rotate df_count
df_count <- as.data.frame(t(df_count))
# match df_count and df_pheno
m <- match(colnames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
# Create ID column for DeSeq
df_pheno_matched$ID <- rownames(df_pheno_matched)
library(DESeq2)
# Build DDS matrix for DeSeq
dds <- DESeqDataSetFromMatrix(countData = df_count,
colData = df_pheno_matched,
design =~ID)
# Apply DeSeq to DDS matrix
dds <- DESeq(dds)
# Compute Normalized Count Data
norm_df <- assay(vst(dds))
#norm_df <- df_count
#df_pheno_matched <- df_pheno
return(list(norm_df, df_pheno_matched))
}
#df_norm <- as.data.frame(t(df))
df_norm <- DeSeq_Norm(df, df_pheno)[[1]]
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
# Rotate df_count
df_count <- as.data.frame(t(df_count))
# match df_count and df_pheno
m <- match(colnames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
library(DESeq2)
# Build DDS matrix for DeSeq
dds <- DESeqDataSetFromMatrix(countData = df_count,
colData = df_pheno_matched,
design =~patient.vital_status))
#df_norm <- as.data.frame(t(df))
df_norm <- DeSeq_Norm(df, df_pheno)[[1]]
View(df_pheno)
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
# Rotate df_count
df_count <- as.data.frame(t(df_count))
# match df_count and df_pheno
m <- match(colnames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
rownames(df_pheno_matched) == colnames(df_count)
library(DESeq2)
# Build DDS matrix for DeSeq
dds <- DESeqDataSetFromMatrix(countData = df_count,
colData = df_pheno_matched,
design =~patient.vital_status)
# Apply DeSeq to DDS matrix
dds <- DESeq(dds)
# Compute Normalized Count Data
norm_df <- assay(vst(dds))
#norm_df <- df_count
#df_pheno_matched <- df_pheno
return(list(norm_df, df_pheno_matched))
}
#df_norm <- as.data.frame(t(df))
df_norm <- DeSeq_Norm(df, df_pheno)[[1]]
df_gino <- DeSeq_Norm(df,df_pheno)[[2]]
list(df_norm, df_gino) <- DeSeq_Norm(df, df_pheno)
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
# Rotate df_count
df_count <- as.data.frame(t(df_count))
# match df_count and df_pheno
m <- match(colnames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
print(rownames(df_pheno_matched) == colnames(df_count))
library(DESeq2)
# Build DDS matrix for DeSeq
dds <- DESeqDataSetFromMatrix(countData = df_count,
colData = df_pheno_matched,
design =~patient.vital_status)
# Apply DeSeq to DDS matrix
dds <- DESeq(dds)
# Compute Normalized Count Data
norm_df <- assay(vst(dds))
#norm_df <- df_count
#df_pheno_matched <- df_pheno
return(list(norm_df, df_pheno_matched))
}
#df_norm <- as.data.frame(t(df))
df_norm,df_gino <- DeSeq_Norm(df, df_pheno)
#df_norm <- as.data.frame(t(df))
df_norm;df_gino <- DeSeq_Norm(df, df_pheno)
View(df_gino)
# Import first df
df <- read.csv2("../Data/ACC_Adrenocortical_Carcinoma/ACC_Count.csv", row.names = 1)
df_pheno <- read.csv2("../Data/ACC_Adrenocortical_Carcinoma/ACC_Pheno.csv", row.names = 1)
# Select from df_pheno the only col we are interested in:
df_pheno <- df_pheno[,c(1,9)]
# transform alive status into factor
# 0: alive
# 1: dead
df_pheno$patient.vital_status <- ifelse(df_pheno$patient.vital_status == "alive", 0, 1)
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
# Rotate df_count
df_count <- as.data.frame(t(df_count))
# match df_count and df_pheno
m <- match(colnames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
print(rownames(df_pheno_matched) == colnames(df_count))
library(DESeq2)
# Build DDS matrix for DeSeq
dds <- DESeqDataSetFromMatrix(countData = df_count,
colData = df_pheno_matched,
design =~patient.vital_status)
# Apply DeSeq to DDS matrix
dds <- DESeq(dds)
# Compute Normalized Count Data
norm_df <- assay(vst(dds))
#norm_df <- df_count
#df_pheno_matched <- df_pheno
#return(list(norm_df, df_pheno_matched))
return(norm_df)
return(df_pheno_matched)
}
#df_norm <- as.data.frame(t(df))
df_pippo;df_gino <- DeSeq_Norm(df, df_pheno)
#df_norm <- as.data.frame(t(df))
df_gino <- DeSeq_Norm(df, df_pheno)
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
# Rotate df_count
df_count <- as.data.frame(t(df_count))
# match df_count and df_pheno
m <- match(colnames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
print(rownames(df_pheno_matched) == colnames(df_count))
library(DESeq2)
# Build DDS matrix for DeSeq
dds <- DESeqDataSetFromMatrix(countData = df_count,
colData = df_pheno_matched,
design =~patient.vital_status)
# Apply DeSeq to DDS matrix
dds <- DESeq(dds)
# Compute Normalized Count Data
norm_df <- assay(vst(dds))
#norm_df <- df_count
#df_pheno_matched <- df_pheno
return(list(norm_df, df_pheno_matched))
#return(norm_df)
#return(df_pheno_matched)
}
#df_norm <- as.data.frame(t(df))
df_gino <- DeSeq_Norm(df, df_pheno)
View(df_gino)
df_gino[[1]]
df_gino[[2]]
View(DeSeq_Norm)
#df_norm <- as.data.frame(t(df))
DeSeq_Norm_list <- DeSeq_Norm(df, df_pheno)
df_norm <- DeSeq_Norm_list[[1]]
df_desc <- DeSeq_Norm_list[[2]]
View(df_desc)
#' Normalize raw count dataframe using DeSeq2
#'
#' DeSeq_Norm returns the count df normalized and its matched clinical dataframe
#'
#' @param df_count df of raw counts with genes on cols and samples on rows
#' @param df_pheno df of clinical observations for each sample of df_count
#' @returns df_count normalized with DeSeq2 and ordered matched df_pheno
DeSeq_Norm <- function(df_count, df_pheno){
# Rotate df_count
df_count <- as.data.frame(t(df_count))
# match df_count and df_pheno
m <- match(colnames(df_count), rownames(df_pheno))
df_pheno_matched <- df_pheno[m, ]
print(rownames(df_pheno_matched) == colnames(df_count))
library(DESeq2)
# Build DDS matrix for DeSeq
dds <- DESeqDataSetFromMatrix(countData = df_count,
colData = df_pheno_matched,
design =~patient.vital_status)
# Apply DeSeq to DDS matrix
dds <- DESeq(dds)
# Compute Normalized Count Data
norm_df <- as.data.frame(assay(vst(dds)))
return(list(norm_df, df_pheno_matched))
}
#df_norm <- as.data.frame(t(df))
DeSeq_Norm_list <- DeSeq_Norm(df, df_pheno)
df_norm <- DeSeq_Norm_list[[1]]
df_desc <- DeSeq_Norm_list[[2]]
View(df_norm)
View(df_desc)
??DeSeq_Norm
