time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(ctree.cm, genes_ctree_treeBased))
}
#' @description Performs tree-based Random Forest classifier
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
tree.rf <- function(data.trainS4, data.testS4, classts,
tL = 5, n = 5, r = 5){
start.time <- Sys.time()
# Define control function for all tree.based classifiers
treeControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE,
savePredictions = "all", returnData = T)
print("Fitting rf")
set.seed(1510)
# Sparse partial least squares
fit.rf <- classify(data = data.trainS4, method = "rf",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = treeControl)
#Predicted class labels
pred.rf <- predict(fit.rf, data.testS4)
pred.rf <- relevel(pred.rf, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tblrf <- table(Predicted = pred.rf, Actual = actual)
rf.cm <- confusionMatrix(tblrf, positive = "D")
# Compute elbow genes
coeff_rf <- as.data.frame(fit.rf@modelInfo@trainedModel[["finalModel"]][["importance"]])$MeanDecreaseGini
names(coeff_rf) <- rownames(as.data.frame(fit.rf@modelInfo@trainedModel[["finalModel"]][["importance"]]))
genes_rf_treeBased <- list(elbow_comp(coefficients = coeff_rf))
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(rf.cm, genes_rf_treeBased))
}
#' @description Performs bagging-based AdaBag classifier
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
bagg.AdaBag <- function(data.trainS4, data.testS4, classts,
tL = 3, n = 3, r = 3){
start.time <- Sys.time()
library(adabag)
library(earth)
# Define control function for all bagg.based classifiers
baggControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE,
savePredictions = "all", returnData = T,
allowParallel = F)
print("Fitting AdaBag")
set.seed(1510)
# Sparse Distance Weighted Discrimination
fit.AdaBag <- classify(data = data.trainS4, method = "AdaBag",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = baggControl)
#Predicted class labels
pred.AdaBag <- predict(fit.AdaBag, data.testS4)
pred.AdaBag <- relevel(pred.AdaBag, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tblAdaBag <- table(Predicted = pred.AdaBag, Actual = actual)
AdaBag.cm <- confusionMatrix(tblAdaBag, positive = "D")
genes_AdaBag_baggedBased <- list(fit.AdaBag@modelInfo@trainedModel[["finalModel"]][["importance"]])
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(AdaBag.cm, genes_AdaBag_baggedBased))
}
#' @description Performs bagging-based treebag classifier
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
bagg.treebag <- function(data.trainS4, data.testS4, classts,
tL = 5, n = 5, r = 5){
start.time <- Sys.time()
library(adabag)
library(earth)
# Define control function for all bagg.based classifiers
baggControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE,
savePredictions = "all", returnData = T)
print("Fitting treebag")
set.seed(1510)
# Sparse linear discriminant analysis
fit.treebag <- classify(data = data.trainS4, method = "treebag",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = baggControl)
#Predicted class labels
pred.treebag <- predict(fit.treebag, data.testS4)
pred.treebag <- relevel(pred.treebag, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tbltreebag <- table(Predicted = pred.treebag, Actual = actual)
treebag.cm <- confusionMatrix(tbltreebag, positive = "D")
# Compute elbow genes
coeff_treebag <- varImp(fit.treebag@modelInfo@trainedModel[["finalModel"]])$Overall
names(coeff_treebag) <- rownames(varImp(fit.treebag@modelInfo@trainedModel[["finalModel"]]))
genes_treebag_baggedBased <- list(elbow_comp(coefficients = coeff_treebag))
# fit.treebag@modelInfo@trainedModel[["finalModel"]][["mtrees"]]
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(treebag.cm, genes_treebag_baggedBased))
}
#' @description Performs bagging-based bagFDA classifier
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
bagg.bagFDA <- function(data.trainS4, data.testS4, classts,
tL = 5, n = 5, r = 5){
start.time <- Sys.time()
library(adabag)
library(earth)
# Define control function for all bagg.based classifiers
baggControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE,
savePredictions = "all", returnData = T)
print("Fitting bagFDA")
set.seed(1510)
# Sparse partial least squares
fit.bagFDA <- classify(data = data.trainS4, method = "bagFDA",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = baggControl)
#Predicted class labels
pred.bagFDA <- predict(fit.bagFDA, data.testS4)
pred.bagFDA <- relevel(pred.bagFDA, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tblbagFDA <- table(Predicted = pred.bagFDA, Actual = actual)
bagFDA.cm <- confusionMatrix(tblbagFDA, positive = "D")
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(bagFDA.cm))
}
#' @description Performs boost-based gamboost classifier
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
boost.gamboost <- function(data.trainS4, data.testS4, classts,
tL = 5, n = 5, r = 5){
start.time <- Sys.time()
# Define control function for all boost.based classifiers
boostControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE)
print("Fitting gamboost")
set.seed(1510)
# Sparse Distance Weighted Discrimination
fit.gamboost <- classify(data = data.trainS4, method = "gamboost",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = boostControl)
#Predicted class labels
pred.gamboost <- predict(fit.gamboost, data.testS4)
pred.gamboost <- relevel(pred.gamboost, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tblgamboost <- table(Predicted = pred.gamboost, Actual = actual)
gamboost.cm <- confusionMatrix(tblgamboost, positive = "D")
genes_gamboost_boostBased <- list(names(coef(fit.gamboost@modelInfo@trainedModel[["finalModel"]])))
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(gamboost.cm, genes_gamboost_boostBased))
}
#' @description Performs boost-based bstSm classifier
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
boost.bstSm <- function(data.trainS4, data.testS4, classts,
tL = 5, n = 5, r = 5){
start.time <- Sys.time()
# Define control function for all boost.based classifiers
boostControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE)
print("Fitting bstSm")
set.seed(1510)
# Sparse linear discriminant analysis
fit.bstSm <- classify(data = data.trainS4, method = "bstSm",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = boostControl)
#Predicted class labels
pred.bstSm <- predict(fit.bstSm, data.testS4)
pred.bstSm <- relevel(pred.bstSm, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tblbstSm <- table(Predicted = pred.bstSm, Actual = actual)
bstSm.cm <- confusionMatrix(tblbstSm, positive = "D")
genes_bstSm_boostBased <- list(fit.bstSm@modelInfo@trainedModel[["finalModel"]][["xNames"]][c(fit.bstSm@modelInfo@trainedModel[["finalModel"]][["xselect"]])])
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(bstSm.cm, genes_bstSm_boostBased))
}
#' @description Performs boost-based bstSm classifier
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
boost.bstTree <- function(data.trainS4, data.testS4, classts,
tL = 3, n = 3, r = 3){
start.time <- Sys.time()
# Define control function for all boost.based classifiers
boostControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE)
print("Fitting bstTree")
set.seed(1510)
# Sparse partial least squares
fit.bstTree <- classify(data = data.trainS4, method = "bstTree",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = boostControl)
#Predicted class labels
pred.bstTree <- predict(fit.bstTree, data.testS4)
pred.bstTree <- relevel(pred.bstTree, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tblbstTree <- table(Predicted = pred.bstTree, Actual = actual)
bstTree.cm <- confusionMatrix(tblbstTree, positive = "D")
genes_bstTree_boostBased <- list(fit.bstTree@modelInfo@trainedModel[["finalModel"]][["xNames"]][c(fit.bstTree@modelInfo@trainedModel[["finalModel"]][["xselect"]])])
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(bstTree.cm, genes_bstTree_boostBased))
}
#' @description Perform pls-based gpls classifiers
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
pls.gpls <- function(data.trainS4, data.testS4, classts,
tL = 5, n = 5, r = 5){
start.time <- Sys.time()
library(gpls)
# Define control function for all pls.based classifiers
plsControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE)
print("Fitting gpls")
set.seed(1510)
# generalized partial least squares
fit.gpls <- classify(data = data.trainS4, method = "gpls",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = plsControl)
#Predicted class labels
pred.gpls <- predict(fit.gpls, data.testS4)
pred.gpls <- relevel(pred.gpls, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tblgpls <- table(Predicted = pred.gpls, Actual = actual)
gpls.cm <- confusionMatrix(tblgpls, positive = "D")
# compute elbow genes
coeff_gpls <- abs(fit.gpls@modelInfo@trainedModel[["finalModel"]][["coefficients"]][-1])
genes_gpls_plsBased <- list(elbow_comp(coefficients = coeff_gpls))
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(gpls.cm, genes_gpls_plsBased))
}
#' @description Perform pls-based pls classifiers
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
pls.pls <- function(data.trainS4, data.testS4, classts,
tL = 5, n = 5, r = 5){
start.time <- Sys.time()
# Define control function for all pls.based classifiers
plsControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE)
print("Fitting pls")
set.seed(1510)
# partial least squares
fit.pls <- classify(data = data.trainS4, method = "pls",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = plsControl)
#Predicted class labels
pred.pls <- predict(fit.pls, data.testS4)
pred.pls <- relevel(pred.pls, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tblpls <- table(Predicted = pred.pls, Actual = actual)
pls.cm <- confusionMatrix(tblpls, positive = "D")
#compute elbow genes
coeff_pls <- abs(fit.pls@modelInfo@trainedModel[["finalModel"]][["coefficients"]][,1,1])
genes_pls_plsBased <- list(elbow_comp(coefficients = coeff_pls))
# genes_pls_plsBased <- list(c("ADA", "Gino"))
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(pls.cm, genes_pls_plsBased))
}
#' @description Perform pls-based pls classifiers
#' @param data.trainS4
#' @param data.testS4
#' @param classts
#' @param tL tune Length
#' @param n number of CV
#' @param r number of repeats for CV
#' @returns A list containing a Confusion Matrix and a list of important genes
pls.spls <- function(data.trainS4, data.testS4, classts,
tL = 5, n = 5, r = 5){
start.time <- Sys.time()
# Define control function for all pls.based classifiers
plsControl <- trainControl(method = "repeatedcv", number = n,
repeats = r, classProbs = TRUE)
print("Fitting SPLS")
set.seed(1510)
# Sparse partial least squares
fit.spls <- classify(data = data.trainS4, method = "spls",
preProcessing = "deseq-vst", ref = "D", tuneLength = tL,
control = plsControl)
#Predicted class labels
pred.spls <- predict(fit.spls, data.testS4)
pred.spls <- relevel(pred.spls, ref = "D")
actual <- relevel(classts$condition, ref = "D")
tblspls <- table(Predicted = pred.spls, Actual = actual)
spls.cm <- confusionMatrix(tblspls, positive = "D")
# compute elbow genes
coeff_spls <- abs(fit.spls@modelInfo@trainedModel[["finalModel"]][["normx"]])
genes_spls_plsBased <- list(elbow_comp(coefficients = coeff_spls))
# Computation time
end.time <- Sys.time()
time.taken <- round(end.time - start.time,2)
print(paste0("Accomplished in ", time.taken, "secs"))
return(list(spls.cm, genes_spls_plsBased))
}
seed=123
crossVal.1layer <- function(seed, i, mincorr = 0.4,
pathdf = "../Data/ACC_Adrenocortical_Carcinoma/ACC_Count.csv",
pathclin = "../Data/ACC_Adrenocortical_Carcinoma/ACC_Pheno.csv"){
print("Importing specified datasets")
dfsImport <- dfs.import(pathdf = pathdf, pathclin = pathclin)
df <- dfsImport[[1]]
class <- dfsImport[[2]]
print("Performing mini features trimming")
# Keep only features with at least 10 counts in 1/3 of samples
keep <- rowSums(df > 10) > round(ncol(df)/3)
df <- df[keep, ]
print("Splitting datasets into train and test")
tts <- trainTest.split(df, class, mincorr = mincorr, seed = seed)
data.trainS4 <- tts[[1]]
data.testS4 <- tts[[2]]
classts <- tts[[3]]
# mini-check to see if filtered genes are the same among train and test
print(sum(rownames(assay(data.trainS4)) == rownames(assay(data.testS4))))
print("Starting classification tasks")
## Start running Classifiers
svmR <- svm.Radial(data.trainS4, data.testS4, classts)
svmRadial <- svmR[[1]]
genes_svmRadial_SVMBased <- svmR[[2]]
svmP <- svm.Poly(data.trainS4, data.testS4, classts)
svmPoly <- svmP[[1]]
genes_svmPoly_SVMBased <- svmP[[2]]
svmL <- svm.Linear(data.trainS4, data.testS4, classts)
svmLinear <- svmL[[1]]
genes_svmLinear_SVMBased <- svmL[[2]]
vDLDA <- voom.DLDA(data.trainS4, data.testS4, classts)
voomDLDA <- vDLDA[[1]]
genes_voomDLDA_voomBased <- vDLDA[[2]]
vDQDA <- voom.DQDA(data.trainS4, data.testS4, classts)
voomDQDA <- vDQDA[[1]]
genes_voomDQDA_voomBased <- vDQDA[[2]]
vNSC <- voom.NSC(data.trainS4, data.testS4, classts)
voomNSC <- vNSC[[1]]
genes_voomNSC_voomBased <- vNSC[[2]]
linPLDA <- lin.PLDA(data.trainS4, data.testS4, classts)
PLDA <- linPLDA[[1]]
genes_PLDA_LDABased <- linPLDA[[2]]
linPLDA2 <- lin.PLDA2(data.trainS4, data.testS4, classts)
PLDA2 <- linPLDA2[[1]]
genes_PLDA2_LDABased <- linPLDA2[[2]]
sparse <- sparse.LDA(data.trainS4, data.testS4, classts) # <-- too slow!!
sparseLDA <- sparse[[1]]
genes_sparseLDA_LDABased <- sparse[[2]]
# net <- nnet.based(data.trainS4, data.testS4, classts) # <-- not properly working!!
# #nnet <- net[[1]]
# mlp <- net[[2]]
# mlpML <- net[[3]]
# #avNNet <- net[[4]]
treerpart <- tree.rpart(data.trainS4, data.testS4, classts)
rpart <- treerpart[[1]]
genes_rpart_treeBased <- treerpart[[2]]
genes_rpart_treeBased <- list(names(genes_rpart_treeBased[[1]]))
treecforest <- tree.cforest(data.trainS4, data.testS4, classts)
cforest <- treecforest[[1]]
genes_cforest_treeBased <- treecforest[[2]]
treectree <- tree.ctree(data.trainS4, data.testS4, classts)
ctree <- treectree[[1]]
genes_ctree_treeBased <- treectree[[2]]
treerf <- tree.rf(data.trainS4, data.testS4, classts)
rf <- treerf[[1]]
genes_rf_treeBased <- treerf[[2]]
bagAda <- bagg.AdaBag(data.trainS4, data.testS4, classts)
AdaBag <- bagAda[[1]]
genes_AdaBag_baggedBased <- bagAda[[2]]
genes_AdaBag_baggedBased <- list(names(genes_AdaBag_baggedBased[[1]][genes_AdaBag_baggedBased[[1]]>0]))
bagtree <- bagg.treebag(data.trainS4, data.testS4, classts)
treebag <- bagtree[[1]]
genes_treebag_baggedBased <- bagtree[[2]]
baggfda <- bagg.bagFDA(data.trainS4, data.testS4, classts)
bagFDA <- baggfda[[1]]
bstgam <- boost.gamboost(data.trainS4, data.testS4, classts)
gamboost <- bstgam[[1]]
genes_gamboost_boostBased <- bstgam[[2]]
genes_gamboost_boostBased[[1]] <- sub("bbs\\(([^,]+),.*", "\\1", genes_gamboost_boostBased[[1]])
bstbstsm <- boost.bstSm(data.trainS4, data.testS4, classts)
bstSm <- bstbstsm[[1]]
genes_bstSm_boostBased <- bstbstsm[[2]]
bsttree <- boost.bstTree(data.trainS4, data.testS4, classts)
bstTree <- bsttree[[1]]
genes_bstTree_boostBased <- bsttree[[2]]
plsgpls <- pls.gpls(data.trainS4, data.testS4, classts)
gpls <- plsgpls[[1]]
genes_gpls_plsBased <- plsgpls[[2]]
plspls <- pls.pls(data.trainS4, data.testS4, classts)
pls <- plspls[[1]]
genes_pls_plsBased <- plspls[[2]]
plsspls <- pls.spls(data.trainS4, data.testS4, classts)
spls <- plsspls[[1]]
genes_spls_plsBased <- plsspls[[2]]
# Build Performance-Metrics Table
acc.df <- data.frame(svmRadial = c(svmRadial$overall, svmRadial$byClass),
svmPoly = c(svmPoly$overall, svmPoly$byClass),
svmLinear = c(svmLinear$overall, svmLinear$byClass),
voomDLDA = c(voomDLDA$overall, voomDLDA$byClass),
voomDQDA = c(voomDQDA$overall, voomDQDA$byClass),
voomNSC = c(voomNSC$overall, voomNSC$byClass),
PLDA = c(PLDA$overall, PLDA$byClass),
PLDA2 = c(PLDA2$overall, PLDA2$byClass),
#NBLDA = c(NBLDA$overall, NBLDA$byClass),
sparseLDA = c(sparseLDA$overall, sparseLDA$byClass),
# nnet = c(nnet$overall, nnet$byClass),
# mlp = c(mlp$overall, mlp$byClass),
# mlpML = c(mlpML$overall, mlpML$byClass),
# avNNet = c(avNNet$overall, avNNet$byClass),
rpart = c(rpart$overall, rpart$byClass),
cforest = c(cforest$overall, cforest$byClass),
ctree = c(ctree$overall, ctree$byClass),
rf = c(rf$overall, rf$byClass),
AdaBag = c(AdaBag$overall, AdaBag$byClass),
treebag = c(treebag$overall, treebag$byClass),
bagFDA = c(bagFDA$overall, bagFDA$byClass),
gamboost = c(gamboost$overall, gamboost$byClass),
bstSm = c(bstSm$overall, bstSm$byClass),
bstTree = c(bstTree$overall, bstTree$byClass),
gpls = c(gpls$overall, gpls$byClass),
pls = c(pls$overall, pls$byClass),
spls = c(spls$overall, spls$byClass))
# Save Metrics-Performance Table
write.csv2(t(acc.df), paste0("../Results/provaAccuracyTable_",i,".csv"))
# Build Selected genes list of list
list_genes <- list(genes_svmRadial_SVMBased = genes_svmRadial_SVMBased[[1]],
genes_svmPoly_SVMBased = genes_svmPoly_SVMBased[[1]],
genes_svmLinear_SVMBased = genes_svmLinear_SVMBased[[1]],
genes_voomDLDA_voomBased = genes_voomDLDA_voomBased[[1]],
genes_voomDQDA_voomBased = genes_voomDQDA_voomBased[[1]],
genes_voomNSC_voomBased = genes_voomNSC_voomBased[[1]],
genes_PLDA_LDABased = genes_PLDA_LDABased[[1]],
genes_PLDA2_LDABased = genes_PLDA2_LDABased[[1]],
genes_sparseLDA_LDABased = genes_sparseLDA_LDABased[[1]],
genes_rpart_treeBased = genes_rpart_treeBased[[1]],
genes_cforest_treeBased = genes_cforest_treeBased[[1]],
genes_ctree_treeBased = genes_ctree_treeBased[[1]],
genes_rf_treeBased = genes_rf_treeBased[[1]],
genes_AdaBag_baggedBased = genes_AdaBag_baggedBased[[1]],
genes_treebag_baggedBased = genes_treebag_baggedBased[[1]],
genes_gamboost_boostBased = genes_gamboost_boostBased[[1]],
genes_bstSm_boostBased = genes_bstSm_boostBased[[1]],
genes_bstTree_boostBased = genes_bstTree_boostBased[[1]],
genes_gpls_plsBased = genes_gpls_plsBased[[1]],
genes_pls_plsBased = genes_pls_plsBased[[1]],
genes_spls_plsBased = genes_spls_plsBased[[1]])
# Save list of list of genes as RDS object
saveRDS(list_genes, paste0("../Results/provalist_genes_",i,".rds"))
return(list(acc.df, list_genes))
}
i = 1
print(paste0("Performing Cross-Validation of ",i," layer"))
crossVal.1layer(seed = i, i = i, mincorr = 0.42)
